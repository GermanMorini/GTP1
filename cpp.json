{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"p1": {
		// Plantilla
		"prefix": "plant",
		"body": [
			"#include<iostream>",
			"\nusing namespace std;",
			"\nint main(int argc, char const *argv[]) {",
			"\t${1:code}",
			"\treturn 0;",
			"}"
		]
	},
	"p2": {
		"prefix": "void",
		"body": [
			"void $1($2) {",
			"\tfor(int i = 0; i < $3; i++) {",
			"\t\t$4",
			"\t}",
			"}"
		]
	},
	"p3": {
		// Ordenamiento burbuja mejorado
		"prefix": "bbls",
		"body": [
			"while(b) {",
			"\tb = 0;\n",
			"\tfor(int i = 0; i < $1; i++) {",
			"\t\tif($2) {",
			"\t\t\ttmp = ",
			"\t\t\tb = 1;",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"p4": {
		// Print matrix
		"prefix": "pm",
		"body": [
			"void print_matrix(int matrix[$1][$2], int FILAS, int COLUMNAS) {",
			"\tfor (short i = 0; i < FILAS; i++) {",
			"\t\tfor (short j = 0; j < COLUMNAS; j++) {",
			"\t\t\tcout << matrix[i][j] << \" \";\n\t\t}",
			"\t\tcout << \"\\n\";\n\t}\n}"
		]
	},
	"p9": {
		// Print vector
		"prefix": "pv",
		"body": [
			"void print_vect(int v[], int LARGO) {",
			"\tfor (short i = 0; i < LARGO; i++) {",
			"\t\tcout << v[i] << \" \";\n\t}",
			"\tcout << \"\\n\";\n}",
		]
	},
	"p5": {
		// Matriz aleatoria
		"prefix": "rm",
		"body": [
			"#include<time.h>",
			"void random_matrix(int matrix[$1][$2], int FILAS, int COLUMNAS, int MAX) {",
			"\tsrand(time(NULL));\n",
			"\tfor (short i = 0; i < FILAS; i++) {",
			"\t\tfor (short j = 0; j < COLUMNAS; j++) {",
			"\t\t\tmatrix[i][j] = MAX - rand()%(2*MAX);",
			"\t\t}\n\t}\n}"
		]
	},
	"p8": {
		// Matriz aleatoria
		"prefix": "rmm",
		"body": [
			"#include<time.h>",
			"void random_matrix(int matrix[$1][$2], int FILAS, int COLUMNAS, int MAX, int MIN) {",
			"\tsrand(time(NULL));\n",
			"\tfor (short i = 0; i < FILAS; i++) {",
			"\t\tfor (short j = 0; j < COLUMNAS; j++) {",
			"\t\t\tmatrix[i][j] = MIN + rand()%(MAX-MIN);",
			"\t\t}\n\t}\n}"
		]
	},
	"p6": {
		// Vector aleatorio
		"prefix": "rv",
		"body": [
			"#include<time.h>",
			"void random_vect(int v[], int LARGO, int MAX) {",
			"\tsrand(time(NULL));\n",
			"\tfor (short i = 0; i < LARGO; i++) {",
			"\t\tv[i] = MAX - rand()%(2*MAX);",
			"\t}\n}"
		]
	},
	"p7": {
		// Vector aleatorio 
		"prefix": "rvv",
		"body": [
			"#include<time.h>",
			"void random_vect(int v[], int LARGO, int MAX, int MIN) {",
			"\tsrand(time(NULL));\n",
			"\tfor (short i = 0; i < LARGO; i++) {",
			"\t\tv[i] = MIN + rand()%(MAX-MIN);",
			"\t}\n}"
		]
	}
}