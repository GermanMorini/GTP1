{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"plant": {
		// Plantilla
		"prefix": "plant",
		"body": [
			"#include<iostream>\n",
			"using namespace std;\n",
			"int main(${1:int argc, char const *argv[]}) {",
			"	${2://code}",
			"	return 0;",
			"}"
		]
	},
	"func": {
		"prefix": "func",
		"body": [
			"void $1($2) {",
			"	for(int i = 0; i < $3; i++) {",
			"		${4:for(int j = 0; j < $3; j++) {\\}}",
			"	}",
			"}"
		]
	},
	"bbls": {
		// Ordenamiento burbuja mejorado
		"prefix": "bbls",
		"body": [
			"while(b) {",
			"	b = 0;\n",
			"	for(int i = 0; i < $1; i++) {",
			"		if($2) {",
			"			tmp = ",
			"			b = 1;",
			"		}",
			"	}",
			"}"
		]
	},
	"prm": {
		// Print matrix
		"prefix": "prm",
		"body": [
			"void ${1:print_matrix}(${2:int} matrix[$3][$4], int FILAS, int COLUMNAS) {",
			"	for (short i = 0; i < FILAS; i++) {",
			"		for (short j = 0; j < COLUMNAS; j++) {",
			"			cout << matrix[i][j] << \"\\t\";",
			"		}",
			"		cout << \"\\n\";",
			"	}",
			"	cout << \"\\n\";",
			"}"
		]
	},
	"prv": {
		// Print vector
		"prefix": "prv",
		"body": [
			"void ${1:print_vect}(${2:int} v[], int LARGO) {",
			"	for (short i = 0; i < LARGO; i++) {",
			"		cout << v[i] << \" \";",
			"	}",
			"	cout << \"\\n\\n\";",
			"}"
		]
	},
	"rndm": {
		// Matriz aleatoria
		"prefix": "rndm",
		"body": [
			"#include<time.h>",
			"void random_matrix(int matrix[$1][$2], int FILAS, int COLUMNAS, int MAX) {",
			"	srand(time(NULL));\n",
			"	for (short i = 0; i < FILAS; i++) {",
			"		for (short j = 0; j < COLUMNAS; j++) {",
			"			matrix[i][j] = MAX - rand()%(2*MAX);",
			"		}",
			"	}",
			"}"
		]
	},
	"rndmm": {
		// Matriz aleatoria
		"prefix": "rndmm",
		"body": [
			"#include<time.h>",
			"void random_matrix(int matrix[$1][$2], int FILAS, int COLUMNAS, int MIN, int MAX) {",
			"	srand(time(NULL));\n",
			"	for (short i = 0; i < FILAS; i++) {",
			"		for (short j = 0; j < COLUMNAS; j++) {",
			"			matrix[i][j] = MIN + rand()%(MAX-MIN);",
			"		}",
			"	}",
			"}"
		]
	},
	"rndv": {
		// Vector aleatorio
		"prefix": "rndv",
		"body": [
			"#include<time.h>",
			"void random_vect(int v[], int LARGO, int MAX) {",
			"	srand(time(NULL));\n",
			"	for (short i = 0; i < LARGO; i++) {",
			"		v[i] = MAX - rand()%(2*MAX);",
			"	}",
			"}"
		]
	},
	"rndvv": {
		// Vector aleatorio 
		"prefix": "rndvv",
		"body": [
			"#include<time.h>",
			"void random_vect(int v[], int LARGO, int MIN, int MAX) {",
			"	srand(time(NULL));\n",
			"	for (short i = 0; i < LARGO; i++) {",
			"		v[i] = MIN + rand()%(MAX-MIN);",
			"	}",
			"}"
		]
	}
}