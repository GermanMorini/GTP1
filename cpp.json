{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"plant1": {
		// Plantilla
		"prefix": "plant1",
		"body": [
			"#include<iostream>\n",
			"using namespace std;\n",
			"int main(${1:int argc, char const *argv[]}) {",
			"	${2://code}",
			"	return 0;",
			"}"
		]
	},
	"plant2": {
		// Plantilla 2
		"prefix": "plant2",
		"body": [
			"#include<iostream>",
			"#include<time.h>\n",
			"using namespace std;\n",
			"//------------- AYUDA PARA TESTEAR EL CÓDIGO ---------------------------\n",
			"void random_mat(float matrix[20][20], int ${1:FILAS}, int ${2:COLUMNAS}, int MIN, int MAX) {",
			"	for (short i = 0; i < ${1:FILAS}; i++) {",
			"		for (short j = 0; j < ${2:COLUMNAS}; j++) {",
			"			matrix[i][j] = MIN + rand()%(MAX-MIN+1);",
			"		}",
			"	}",
			"}\n",
			"void random_vec(int v[], int LARGO, int MIN, int MAX) {",
			"	for (short i = 0; i < LARGO; i++) {",
			"		v[i] = MIN + rand()%(MAX-MIN+1);",
			"	}",
			"}\n",
			"void imp_mat(float matrix[20][20], int ${1:FILAS}, int ${2:COLUMNAS}) {",
			"	for (short i = 0; i < ${1:FILAS}; i++) {",
			"		for (short j = 0; j < ${2:COLUMNAS}; j++) {",
			"			cout << matrix[i][j] << \"\\t\";",
			"		}",
			"		cout << \"\\n\";",
			"	}",
			"	cout << \"\\n\";",
			"}\n",
			"void imp_vect(int v[], int LARGO) {",
			"	for (short i = 0; i < LARGO; i++) {",
			"		cout << v[i] << \" \";",
			"	}",
			"	cout << \"\\n\\n\";",
			"}\n",
			"//--------------------------------------------------------------------\n\n\n",
			"int main(${3:int argc, char const *argv[]}) {",
			"	srand(time(NULL));",
			"	${4://code}",
			"	return 0;",
			"}"
		]
	},
	"plant3": {
		"prefix": "plant3",
		"body": [
			"//--------------------------------------------------------------------",
			"#include<time.h>",
			"#include<string.h>",
			"#include<iostream>",
			"",
			"const string base_de_datos[100] = {\"Forrest\", \"Mahmud\", \"Rosella\", \"Risa\", \"Katee\", \"Bonnibelle\", \"Germana\", \"Maximilian\", \"Booth\", \"Joly\", \"Luciana\", \"Adolph\", \"Freemon\", \"Siegfried\", \"Harper\", \"Nikolas\", \"Marris\", \"Torrance\", \"Viola\", \"Shandy\", \"Craggy\", \"Bethany\", \"Jewell\", \"Saxe\", \"Eldredge\", \"Elsa\", \"Gweneth\", \"Gerrie\", \"Bat\", \"Randall\", \"Trumaine\", \"Ed\", \"Stacie\", \"Roanna\", \"Rozalin\", \"Lexie\", \"Hebert\", \"Elinore\", \"Bear\", \"Mellisa\", \"Darcee\", \"Ari\", \"Carleen\", \"Van\", \"Fifine\", \"Minny\", \"Elmo\", \"Norina\", \"Adi\", \"Pepita\", \"Eloisa\", \"Josee\", \"Julita\", \"Gilbert\", \"Anatollo\", \"Harman\", \"Bill\", \"Waylan\", \"Brigham\", \"Kelila\", \"Auroora\", \"Mano\", \"Fayette\", \"Clo\", \"Rora\", \"Almeta\", \"Elwira\", \"Hugibert\", \"Jake\", \"Olimpia\", \"Pete\", \"Mikaela\", \"Ollie\", \"Phillipe\", \"Loralee\", \"Aggi\", \"Sandi\", \"Chelsy\", \"Laird\", \"Giselbert\", \"Clarissa\", \"Marylinda\", \"Leesa\", \"Perry\", \"Roxanna\", \"Fidelia\", \"Leticia\", \"Jenna\", \"Josefina\", \"Alli\", \"Robinette\", \"Janessa\", \"Adolphe\", \"Freddie\", \"Helene\", \"Culver\", \"Sylvia\", \"Ardith\", \"Rafaela\", \"Yetty\"};",
			"",
			"void nombre_aleatorio(char nombre[]) {",
			"        int random_index = rand()%100;",
			"        // 'strcpy' copia un arreglo de caracteres en otro",
			"        // ´string.c_str()´ convierte un dato de tipo 'string' en un arrgelo de 'char's",
			"        strcpy(nombre, base_de_datos[random_index].c_str());",
			"}",
			"",
			"void matriz_aleatoria(float matrix[][20], int FILAS, int COLUMNAS, int MIN, int MAX) {",
			"        for (short i = 0; i < FILAS; i++) {",
			"                for (short j = 0; j < COLUMNAS; j++) {",
			"                        matrix[i][j] = MIN + rand()%(MAX-MIN+1);",
			"                }",
			"        }",
			"}",
			"",
			"void vector_aleatorio(int v[], int LARGO, int MIN, int MAX) {",
			"        for (short i = 0; i < LARGO; i++) {",
			"                v[i] = MIN + rand()%(MAX-MIN+1);",
			"        }",
			"}",
			"",
			"void imprimir_matriz(float matrix[][20], int FILAS, int COLUMNAS) {",
			"        for (short i = 0; i < FILAS; i++) {",
			"                for (short j = 0; j < COLUMNAS; j++) {",
			"                        cout << matrix[i][j] << \"\\t\";",
			"                }",
			"                cout << \"\\n\";",
			"        }",
			"        cout << \"\\n\";",
			"}",
			"",
			"void imprimir_vector(int v[], int LARGO) {",
			"        for (short i = 0; i < LARGO; i++) {",
			"                cout << v[i] << \" \";",
			"        }",
			"        cout << \"\\n\\n\";",
			"}",
			"",
			"//--------------------------------------------------------------------"
		]
	},
	"bbls": {
		// Ordenamiento burbuja mejorado
		"prefix": "bbls",
		"body": [
			"while(b) {",
			"	b = 0;\n",
			"	for(int i = 0; i < $1; i++) {",
			"		if($2) {",
			"			tmp = ",
			"			b = 1;",
			"		}",
			"	}",
			"}"
		]
	}
}
